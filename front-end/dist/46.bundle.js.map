{"version":3,"file":"46.bundle.js","mappings":"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","sources":["webpack://my_pra/./src/pages/recruitment/Apply.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Form,\n  Input,\n  Upload,\n  Button,\n  message,\n  Select,\n  Spin,\n  Card,\n  Row,\n  Col,\n  Space,\n  Typography,\n} from \"antd\";\nimport { UploadOutlined, ArrowLeftOutlined } from \"@ant-design/icons\";\nimport request from \"../../utils/request\";\nimport dayjs from \"dayjs\";\n\nconst ApplyPage: React.FC = () => {\n  const [form] = Form.useForm();\n  const [uploading, setUploading] = useState(false);\n  const [jobs, setJobs] = useState<any[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [fileList, setFileList] = useState<any[]>([]);\n  const [selectedJob, setSelectedJob] = useState<any>(null);\n  const [viewMode, setViewMode] = useState<\"list\" | \"apply\">(\"list\");\n  const [searchText, setSearchText] = useState<string>(\"\");\n  const [filterDepartment, setFilterDepartment] = useState<string>(\"all\");\n  const [departments, setDepartments] = useState<any[]>([]);\n\n  // 添加工作经验和教育经历的状态\n  const [workExperiences, setWorkExperiences] = useState<any[]>([{}]);\n  const [educations, setEducations] = useState<any[]>([{}]);\n  const [skills, setSkills] = useState<string[]>([]);\n\n  useEffect(() => {\n    // 获取所有发布的职位\n    const fetchJobs = async () => {\n      setLoading(true);\n      try {\n        const response = await request.get(\"/jobs\");\n        setJobs(response.data.data || []);\n      } catch (error) {\n        console.error(\"获取职位列表失败:\", error);\n        message.error(\"获取职位列表失败\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    const fetchDepartments = async () => {\n      try {\n        const response = await request.get(\"/departments\");\n        setDepartments(response.data.data || []);\n      } catch (error) {\n        console.error(\"获取部门列表失败:\", error);\n      }\n    };\n\n    fetchJobs();\n    fetchDepartments();\n  }, []);\n\n  const handleUpload = {\n    customRequest: async ({ file, onSuccess, onError }: any) => {\n      const chunkSize = 1024 * 1024; // 1MB 每片\n      const chunks = Math.ceil(file.size / chunkSize);\n      setUploading(true);\n\n      try {\n        const uploadChunks = async () => {\n          for (let i = 0; i < chunks; i++) {\n            const start = i * chunkSize;\n            const end = Math.min(file.size, start + chunkSize);\n            const chunk = file.slice(start, end);\n\n            const formData = new FormData();\n            formData.append(\"chunk\", chunk);\n            formData.append(\"fileName\", file.name);\n            formData.append(\"chunkIndex\", String(i));\n            formData.append(\"chunks\", String(chunks));\n\n            // 添加错误处理和重试逻辑\n            let retries = 3;\n            while (retries > 0) {\n              try {\n                const response = await request.post(\"/upload/chunk\", formData, {\n                  headers: {\n                    \"Content-Type\": \"multipart/form-data\",\n                  },\n                });\n\n                if (response.status !== 200) {\n                  throw new Error(`上传失败: ${response.statusText}`);\n                }\n\n                break; // 成功则跳出重试循环\n              } catch (err) {\n                retries--;\n                if (retries === 0) throw err;\n                // 等待一秒后重试\n                await new Promise((resolve) => setTimeout(resolve, 1000));\n              }\n            }\n          }\n\n          // 所有分片上传完成后，请求合并文件\n          const mergeResponse = await request.post(\"/upload/merge\", {\n            fileName: file.name,\n            chunks: chunks,\n          });\n\n          return mergeResponse.data.data;\n        };\n\n        const result = await uploadChunks();\n        onSuccess(result);\n        message.success(`${file.name} 上传成功`);\n        return result;\n      } catch (error) {\n        console.error(\"上传错误详情:\", error);\n        onError(error);\n        message.error(`${file.name} 上传失败: ${error.message || \"未知错误\"}`);\n      } finally {\n        setUploading(false);\n      }\n    },\n    beforeUpload: (file: File) => {\n      const isPDF = file.type === \"application/pdf\";\n      if (!isPDF) {\n        message.error(\"只能上传 PDF 文件！\");\n        return Upload.LIST_IGNORE;\n      }\n      const isLt20M = file.size / 1024 / 1024 < 20;\n      if (!isLt20M) {\n        message.error(\"文件大小不能超过 20MB！\");\n        return Upload.LIST_IGNORE;\n      }\n      return true;\n    },\n  };\n\n  const onFinish = async (values: any) => {\n    try {\n      if (fileList.length === 0) {\n        message.error(\"请上传简历文件\");\n        return;\n      }\n\n      const fileInfo = fileList[0].response || {};\n\n      // 处理工作经验数据，确保格式与后端模型匹配\n      const formattedWorkExperience =\n        values.workExperience?.map((exp: any) => ({\n          company: exp.company,\n          position: exp.position,\n          duration: `${exp.startDate || \"\"} - ${exp.endDate || \"\"}`,\n          description: exp.description,\n        })) || [];\n\n      // 处理教育经历数据，确保格式与后端模型匹配\n      const formattedEducation = values.education?.[0]\n        ? {\n            school: values.education[0].school,\n            major: values.education[0].major,\n            degree: values.education[0].degree,\n            graduationYear: values.education[0].endDate?.split(\"-\")[0] || \"\",\n          }\n        : undefined;\n\n      const submitData = {\n        jobId: selectedJob._id,\n        fileUrl: fileInfo.url,\n        fileName: fileList[0].name,\n        coverLetter: values.coverLetter,\n        status: \"pending\",\n        submittedAt: new Date(),\n        // 使用格式化后的数据\n        workExperience: formattedWorkExperience,\n        education: formattedEducation,\n        skills: values.skills || [],\n      };\n\n      await request.post(\"/resumes\", submitData);\n      message.success(\"简历提交成功！\");\n      form.resetFields();\n      setFileList([]);\n      setViewMode(\"list\");\n      setSelectedJob(null);\n      // 重置新增的状态\n      setWorkExperiences([{}]);\n      setEducations([{}]);\n      setSkills([]);\n    } catch (error) {\n      console.error(\"提交失败:\", error);\n      message.error(\"提交失败，请重试\");\n    }\n  };\n\n  const handleApplyJob = (job: any) => {\n    setSelectedJob(job);\n    setViewMode(\"apply\");\n    form.resetFields();\n  };\n\n  const handleBackToList = () => {\n    setViewMode(\"list\");\n    setSelectedJob(null);\n    form.resetFields();\n    setFileList([]);\n  };\n\n  // 筛选职位列表\n  const filteredJobs = jobs.filter((job) => {\n    // 只显示开放中的职位\n    if (job.status !== \"open\") return false;\n\n    // 搜索文本筛选\n    const matchesSearch = searchText\n      ? job.title.toLowerCase().includes(searchText.toLowerCase()) ||\n        job.description.toLowerCase().includes(searchText.toLowerCase()) ||\n        job.location.toLowerCase().includes(searchText.toLowerCase())\n      : true;\n\n    // 部门筛选\n    const jobDeptId =\n      typeof job.department === \"object\" && job.department\n        ? job.department._id\n        : job.department;\n    const matchesDepartment =\n      filterDepartment === \"all\" ? true : jobDeptId === filterDepartment;\n\n    return matchesSearch && matchesDepartment;\n  });\n\n  const getDepartmentName = (job: any) => {\n    if (typeof job.department === \"object\" && job.department) {\n      return job.department.name;\n    }\n    return job.department || \"未分配\";\n  };\n\n  // 重置筛选条件\n  const resetFilters = () => {\n    setSearchText(\"\");\n    setFilterDepartment(\"all\");\n  };\n\n  // 添加工作经验表单项\n  const addWorkExperience = () => {\n    setWorkExperiences([...workExperiences, {}]);\n  };\n\n  // 移除工作经验表单项\n  const removeWorkExperience = (index: number) => {\n    const newWorkExperiences = [...workExperiences];\n    newWorkExperiences.splice(index, 1);\n    setWorkExperiences(newWorkExperiences);\n  };\n\n  // 添加教育经历表单项\n  const addEducation = () => {\n    setEducations([...educations, {}]);\n  };\n\n  // 移除教育经历表单项\n  const removeEducation = (index: number) => {\n    const newEducations = [...educations];\n    newEducations.splice(index, 1);\n    setEducations(newEducations);\n  };\n\n  return (\n    <div style={{ maxWidth: 800, margin: \"0 auto\", padding: \"24px\" }}>\n      {viewMode === \"list\" ? (\n        <>\n          <h2>职位列表</h2>\n          <Spin spinning={loading}>\n            {/* 搜索和筛选区域 */}\n            <Card style={{ marginBottom: 16 }}>\n              <Row gutter={[16, 16]}>\n                <Col span={12}>\n                  <Input.Search\n                    placeholder=\"搜索职位名称、描述或地点\"\n                    value={searchText}\n                    onChange={(e) => setSearchText(e.target.value)}\n                    onSearch={(value) => setSearchText(value)}\n                    allowClear\n                  />\n                </Col>\n                <Col span={8}>\n                  <Select\n                    placeholder=\"按部门筛选\"\n                    style={{ width: \"100%\" }}\n                    value={filterDepartment}\n                    onChange={(value) => setFilterDepartment(value)}\n                  >\n                    <Select.Option value=\"all\">全部部门</Select.Option>\n                    {departments.map((dept) => (\n                      <Select.Option key={dept._id} value={dept._id}>\n                        {dept.name}\n                      </Select.Option>\n                    ))}\n                  </Select>\n                </Col>\n                <Col span={4}>\n                  <Button onClick={resetFilters}>重置筛选</Button>\n                </Col>\n              </Row>\n            </Card>\n\n            {filteredJobs.length === 0 ? (\n              <Card>\n                <Typography.Text>暂无招聘中的职位</Typography.Text>\n              </Card>\n            ) : (\n              <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n                {filteredJobs.map((job) => (\n                  <Card key={job._id}>\n                    <Row justify=\"space-between\" align=\"middle\">\n                      <Col>\n                        <Typography.Title level={4} style={{ margin: 0 }}>\n                          {job.title}\n                          <Typography.Text\n                            type=\"success\"\n                            style={{ fontSize: \"14px\", marginLeft: \"10px\" }}\n                          >\n                            招聘中\n                          </Typography.Text>\n                        </Typography.Title>\n                        <Typography.Text type=\"secondary\">\n                          {getDepartmentName(job)} · {job.location}\n                          {job.jobType && ` · ${job.jobType}`}\n                        </Typography.Text>\n                        {job.salaryRange && (\n                          <Typography.Text\n                            type=\"success\"\n                            style={{ display: \"block\", marginTop: 8 }}\n                          >\n                            {job.salaryRange}\n                          </Typography.Text>\n                        )}\n                      </Col>\n                      <Col>\n                        <Button\n                          type=\"primary\"\n                          onClick={() => handleApplyJob(job)}\n                        >\n                          申请职位\n                        </Button>\n                      </Col>\n                    </Row>\n                    <Typography.Paragraph style={{ marginTop: 16 }}>\n                      <strong>职位描述：</strong>\n                      <br />\n                      {job.description}\n                    </Typography.Paragraph>\n                    {job.expiryDate && (\n                      <Typography.Text type=\"secondary\">\n                        截止日期: {dayjs(job.expiryDate).format(\"YYYY-MM-DD\")}\n                      </Typography.Text>\n                    )}\n                  </Card>\n                ))}\n              </Space>\n            )}\n          </Spin>\n        </>\n      ) : (\n        <>\n          <div style={{ marginBottom: 16 }}>\n            <Button\n              icon={<ArrowLeftOutlined />}\n              onClick={handleBackToList}\n              style={{ marginRight: 16 }}\n            >\n              返回\n            </Button>\n            <Typography.Title\n              level={3}\n              style={{ display: \"inline-block\", margin: 0 }}\n            >\n              职位申请\n            </Typography.Title>\n            <Typography.Text style={{ marginLeft: 8 }}>\n              {selectedJob?.title}\n            </Typography.Text>\n          </div>\n\n          <Card style={{ marginBottom: 16 }}>\n            <Typography.Title level={4}>{selectedJob?.title}</Typography.Title>\n            <Typography.Text type=\"secondary\">\n              {getDepartmentName(selectedJob)} · {selectedJob?.location}\n              {selectedJob?.jobType && ` · ${selectedJob?.jobType}`}\n            </Typography.Text>\n            {selectedJob?.salaryRange && (\n              <Typography.Text\n                type=\"success\"\n                style={{ display: \"block\", marginTop: 8 }}\n              >\n                {selectedJob?.salaryRange}\n              </Typography.Text>\n            )}\n            <Typography.Paragraph style={{ marginTop: 16 }}>\n              <strong>职位描述：</strong>\n              <br />\n              {selectedJob?.description}\n            </Typography.Paragraph>\n          </Card>\n\n          <Form form={form} onFinish={onFinish} layout=\"vertical\">\n            <Form.Item\n              name=\"resume\"\n              label=\"上传简历\"\n              rules={[{ required: true, message: \"请上传简历\" }]}\n            >\n              <Upload\n                {...handleUpload}\n                maxCount={1}\n                accept=\".pdf\"\n                fileList={fileList}\n                onChange={({ fileList }) => setFileList(fileList)}\n              >\n                <Button icon={<UploadOutlined />} loading={uploading}>\n                  选择文件\n                </Button>\n              </Upload>\n            </Form.Item>\n\n            {/* 工作经验部分 */}\n            <Card title=\"工作经验\" style={{ marginBottom: 16 }}>\n              {workExperiences.map((_, index) => (\n                <div\n                  key={index}\n                  style={{\n                    marginBottom: 16,\n                    border: \"1px dashed #d9d9d9\",\n                    padding: 16,\n                    borderRadius: 4,\n                  }}\n                >\n                  <Row gutter={16}>\n                    <Col span={12}>\n                      <Form.Item\n                        name={[\"workExperience\", index, \"company\"]}\n                        label=\"公司名称\"\n                        rules={[{ required: true, message: \"请输入公司名称\" }]}\n                      >\n                        <Input placeholder=\"公司名称\" />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        name={[\"workExperience\", index, \"position\"]}\n                        label=\"职位\"\n                        rules={[{ required: true, message: \"请输入职位\" }]}\n                      >\n                        <Input placeholder=\"职位\" />\n                      </Form.Item>\n                    </Col>\n                  </Row>\n                  <Row gutter={16}>\n                    <Col span={12}>\n                      <Form.Item\n                        name={[\"workExperience\", index, \"startDate\"]}\n                        label=\"开始日期\"\n                      >\n                        <Input type=\"date\" />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        name={[\"workExperience\", index, \"endDate\"]}\n                        label=\"结束日期\"\n                      >\n                        <Input type=\"date\" />\n                      </Form.Item>\n                    </Col>\n                  </Row>\n                  <Form.Item\n                    name={[\"workExperience\", index, \"description\"]}\n                    label=\"工作描述\"\n                  >\n                    <Input.TextArea rows={3} placeholder=\"工作职责和成就\" />\n                  </Form.Item>\n                  {workExperiences.length > 1 && (\n                    <Button\n                      type=\"dashed\"\n                      danger\n                      onClick={() => removeWorkExperience(index)}\n                      style={{ marginTop: 8 }}\n                    >\n                      删除此工作经验\n                    </Button>\n                  )}\n                </div>\n              ))}\n              <Button type=\"dashed\" onClick={addWorkExperience} block>\n                + 添加工作经验\n              </Button>\n            </Card>\n\n            {/* 教育经历部分 */}\n            <Card title=\"教育经历\" style={{ marginBottom: 16 }}>\n              {educations.map((_, index) => (\n                <div\n                  key={index}\n                  style={{\n                    marginBottom: 16,\n                    border: \"1px dashed #d9d9d9\",\n                    padding: 16,\n                    borderRadius: 4,\n                  }}\n                >\n                  <Row gutter={16}>\n                    <Col span={12}>\n                      <Form.Item\n                        name={[\"education\", index, \"school\"]}\n                        label=\"学校名称\"\n                        rules={[{ required: true, message: \"请输入学校名称\" }]}\n                      >\n                        <Input placeholder=\"学校名称\" />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        name={[\"education\", index, \"degree\"]}\n                        label=\"学位\"\n                        rules={[{ required: true, message: \"请输入学位\" }]}\n                      >\n                        <Input placeholder=\"学位\" />\n                      </Form.Item>\n                    </Col>\n                  </Row>\n                  <Row gutter={16}>\n                    <Col span={12}>\n                      <Form.Item\n                        name={[\"education\", index, \"startDate\"]}\n                        label=\"开始日期\"\n                      >\n                        <Input type=\"date\" />\n                      </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                      <Form.Item\n                        name={[\"education\", index, \"endDate\"]}\n                        label=\"结束日期\"\n                      >\n                        <Input type=\"date\" />\n                      </Form.Item>\n                    </Col>\n                  </Row>\n                  <Form.Item name={[\"education\", index, \"major\"]} label=\"专业\">\n                    <Input placeholder=\"专业\" />\n                  </Form.Item>\n                  {educations.length > 1 && (\n                    <Button\n                      type=\"dashed\"\n                      danger\n                      onClick={() => removeEducation(index)}\n                      style={{ marginTop: 8 }}\n                    >\n                      删除此教育经历\n                    </Button>\n                  )}\n                </div>\n              ))}\n              <Button type=\"dashed\" onClick={addEducation} block>\n                + 添加教育经历\n              </Button>\n            </Card>\n\n            {/* 技能部分 */}\n            <Form.Item name=\"skills\" label=\"技能\">\n              <Select\n                mode=\"tags\"\n                style={{ width: \"100%\" }}\n                placeholder=\"输入技能并按回车添加\"\n                onChange={(value) => setSkills(value)}\n              />\n            </Form.Item>\n\n            <Form.Item\n              name=\"coverLetter\"\n              label=\"求职信\"\n              rules={[{ required: true, message: \"请填写求职信\" }]}\n            >\n              <Input.TextArea rows={6} />\n            </Form.Item>\n\n            <Form.Item>\n              <Button type=\"primary\" htmlType=\"submit\">\n                提交申请\n              </Button>\n            </Form.Item>\n          </Form>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ApplyPage;\n"],"names":["ApplyPage","form","Form","useForm","uploading","setUploading","useState","jobs","setJobs","loading","setLoading","fileList","setFileList","selectedJob","setSelectedJob","viewMode","setViewMode","searchText","setSearchText","filterDepartment","setFilterDepartment","departments","setDepartments","workExperiences","setWorkExperiences","educations","setEducations","skills","setSkills","useEffect","async","response","request","get","data","error","console","message","fetchJobs","fetchDepartments","handleUpload","customRequest","file","onSuccess","onError","chunkSize","chunks","Math","ceil","size","uploadChunks","i","start","end","min","chunk","slice","formData","FormData","append","name","String","retries","post","headers","status","Error","statusText","err","Promise","resolve","setTimeout","fileName","result","success","beforeUpload","type","Upload","LIST_IGNORE","filteredJobs","filter","job","matchesSearch","title","toLowerCase","includes","description","location","jobDeptId","department","_id","getDepartmentName","React","style","maxWidth","margin","padding","Spin","spinning","Card","marginBottom","Row","gutter","Col","span","Input","Search","placeholder","value","onChange","e","target","onSearch","allowClear","Select","width","Option","map","dept","key","Button","onClick","resetFilters","length","Typography","Text","Space","direction","justify","align","Title","level","fontSize","marginLeft","jobType","salaryRange","display","marginTop","resetFields","handleApplyJob","Paragraph","expiryDate","dayjs","format","icon","ArrowLeftOutlined","handleBackToList","marginRight","onFinish","fileInfo","formattedWorkExperience","values","workExperience","exp","company","position","duration","startDate","endDate","formattedEducation","education","school","major","degree","graduationYear","split","undefined","submitData","jobId","fileUrl","url","coverLetter","submittedAt","Date","layout","Item","label","rules","required","_extends","maxCount","accept","UploadOutlined","_","index","border","borderRadius","TextArea","rows","danger","newWorkExperiences","splice","removeWorkExperience","addWorkExperience","block","newEducations","removeEducation","addEducation","mode","htmlType"],"sourceRoot":""}